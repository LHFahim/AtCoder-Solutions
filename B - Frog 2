//https://atcoder.jp/contests/dp/tasks/dp_b


#include<bits/stdc++.h>
using namespace std;

#define endl '\n'
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);
#define MOD 1e9+7
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
typedef long long int ll;
typedef tree< ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update > ordered_set;
/// cout<<*X.find_by_order(1)<<endl; // finds the kth element
/// cout<<X.order_of_key(-5)<<endl;  // number of items in a set that are strictly smaller than our item

int dx[] = {0, 0, +1, -1, +1, +1, -1, -1};
int dy[] = {+1, -1, 0, 0, +1, -1, +1, -1};

const int mx = 1e5+5;
int height[mx], n, k;
int dp[mx];

int solve(int i){

    if(i == n)return 0;
    if(dp[i] != -1)return dp[i];

    int ret = 2e9;

    for(int j=1; j<=k; j++){
        if(i+j <= n)ret = min(ret, abs(height[i] - height[i+j])+solve(i+j) );
    }


    dp[i] = ret;

    return dp[i];
}

int main()
{
    optimize();

    cin>>n>>k;
    for(int i= 1; i<=n; i++)cin>>height[i];

    memset(dp, -1, sizeof(dp));

    cout<<solve(1)<<endl;

    return 0;
}
